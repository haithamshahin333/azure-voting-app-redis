name: build_deploy_aks
on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.registry }}
      REPO_NAME: ${{ secrets.repository }}
      IMAGE_NAME: azure-vote-front
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_SECRET }}
          environment: 'AzureUSGovernment'
          enable-AzPSSession: true

      - name: Import image and get push time
        id: import_image
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            az acr import --name $REGISTRY --source mcr.microsoft.com/dotnet/monitor --image $REPO_NAME/$IMAGE_NAME:$IMAGE_TAG --force
            PUSH_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")
            echo "push_time=$PUSH_TIME" >> "$GITHUB_OUTPUT"

      - name: Query ACR image vulnerability assessment
        id: acr_vuln_query
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            PUSH_TIME="${{ steps.import_image.outputs.push_time }}"
            DIGEST=$(az acr manifest list-metadata \
              --registry "$REGISTRY" \
              --name "$REPO_NAME/$IMAGE_NAME" \
              --query "[?tags[?@=='$IMAGE_TAG']].digest" \
              --output tsv)
            for i in {1..15}; do
              QUERY="SecurityResources
              | where type == 'microsoft.security/assessments/subassessments'
              | where properties.additionalData.assessedResourceType == 'AzureContainerRegistryVulnerability'
              | extend assessmentKey = extract(@'(?i)providers/Microsoft.Security/assessments/([^/]*)', 1, id)
              | where assessmentKey == 'c0b7cfc6-3172-465a-b378-53c7ff2cc0d5'
              | where properties.resourceDetails.id startswith '/repositories/$REPO_NAME/$IMAGE_NAME/images'
              | extend TimeGenerated = properties.timeGenerated
              | where TimeGenerated >= todatetime('$PUSH_TIME')
              | extend status = properties.status.code
              | extend severity = properties.status.severity
              | where status != 'Healthy'"
              echo -e "Running Resource Graph query:\n$QUERY"
              RESULT=$(az graph query -q "$QUERY" --first 1 --output json)
              echo "Query result: $RESULT"
              COUNT=$(echo "$RESULT" | jq -r '.data | length')
              if [ "$COUNT" -gt 0 ]; then
                break
              fi
              sleep 60
            done
            echo "vuln_query_result=$RESULT" >> "$GITHUB_OUTPUT"


